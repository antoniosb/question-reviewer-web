// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Components > QuestionTable Render 1`] = `
ShallowWrapper {
  "length": 1,
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <QuestionTable
    value={
      Array [
        Object {
          "id": 1,
          "question_alternatives": Array [
            Object {},
            Object {},
            Object {},
            Object {},
            Object {},
          ],
          "updated_at": "2000-12-01T14:01:01.000Z",
          "user": Object {
            "login": "teste",
          },
        },
      ]
    }
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "class",
    "props": Object {
      "accordion": true,
      "bordered": true,
      "children": Array [
        <CollapsePanel
          className="question-table-item"
          header={
            <QuestionTableItemHeader
              item={
                Object {
                  "id": 1,
                  "question_alternatives": Array [
                    Object {},
                    Object {},
                    Object {},
                    Object {},
                    Object {},
                  ],
                  "updated_at": "2000-12-01T14:01:01.000Z",
                  "user": Object {
                    "login": "teste",
                  },
                }
              }
            />
          }
        >
          <withRouter(Connect(QuestionTableItem))
            value={
              Object {
                "id": 1,
                "question_alternatives": Array [
                  Object {},
                  Object {},
                  Object {},
                  Object {},
                  Object {},
                ],
                "updated_at": "2000-12-01T14:01:01.000Z",
                "user": Object {
                  "login": "teste",
                },
              }
            }
          />
        </CollapsePanel>,
      ],
      "className": "question-table",
      "openAnimation": Object {
        "appear": [Function],
        "enter": [Function],
        "leave": [Function],
      },
      "prefixCls": "ant-collapse",
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": "0",
        "nodeType": "class",
        "props": Object {
          "children": <withRouter(Connect(QuestionTableItem))
            value={
              Object {
                "id": 1,
                "question_alternatives": Array [
                  Object {},
                  Object {},
                  Object {},
                  Object {},
                  Object {},
                ],
                "updated_at": "2000-12-01T14:01:01.000Z",
                "user": Object {
                  "login": "teste",
                },
              }
            }
          />,
          "className": "question-table-item",
          "header": <QuestionTableItemHeader
            item={
              Object {
                "id": 1,
                "question_alternatives": Array [
                  Object {},
                  Object {},
                  Object {},
                  Object {},
                  Object {},
                ],
                "updated_at": "2000-12-01T14:01:01.000Z",
                "user": Object {
                  "login": "teste",
                },
              }
            }
          />,
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "value": Object {
              "id": 1,
              "question_alternatives": Array [
                Object {},
                Object {},
                Object {},
                Object {},
                Object {},
              ],
              "updated_at": "2000-12-01T14:01:01.000Z",
              "user": Object {
                "login": "teste",
              },
            },
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        "type": [Function],
      },
    ],
    "type": [Function],
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "class",
      "props": Object {
        "accordion": true,
        "bordered": true,
        "children": Array [
          <CollapsePanel
            className="question-table-item"
            header={
              <QuestionTableItemHeader
                item={
                  Object {
                    "id": 1,
                    "question_alternatives": Array [
                      Object {},
                      Object {},
                      Object {},
                      Object {},
                      Object {},
                    ],
                    "updated_at": "2000-12-01T14:01:01.000Z",
                    "user": Object {
                      "login": "teste",
                    },
                  }
                }
              />
            }
          >
            <withRouter(Connect(QuestionTableItem))
              value={
                Object {
                  "id": 1,
                  "question_alternatives": Array [
                    Object {},
                    Object {},
                    Object {},
                    Object {},
                    Object {},
                  ],
                  "updated_at": "2000-12-01T14:01:01.000Z",
                  "user": Object {
                    "login": "teste",
                  },
                }
              }
            />
          </CollapsePanel>,
        ],
        "className": "question-table",
        "openAnimation": Object {
          "appear": [Function],
          "enter": [Function],
          "leave": [Function],
        },
        "prefixCls": "ant-collapse",
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": "0",
          "nodeType": "class",
          "props": Object {
            "children": <withRouter(Connect(QuestionTableItem))
              value={
                Object {
                  "id": 1,
                  "question_alternatives": Array [
                    Object {},
                    Object {},
                    Object {},
                    Object {},
                    Object {},
                  ],
                  "updated_at": "2000-12-01T14:01:01.000Z",
                  "user": Object {
                    "login": "teste",
                  },
                }
              }
            />,
            "className": "question-table-item",
            "header": <QuestionTableItemHeader
              item={
                Object {
                  "id": 1,
                  "question_alternatives": Array [
                    Object {},
                    Object {},
                    Object {},
                    Object {},
                    Object {},
                  ],
                  "updated_at": "2000-12-01T14:01:01.000Z",
                  "user": Object {
                    "login": "teste",
                  },
                }
              }
            />,
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "function",
            "props": Object {
              "value": Object {
                "id": 1,
                "question_alternatives": Array [
                  Object {},
                  Object {},
                  Object {},
                  Object {},
                  Object {},
                ],
                "updated_at": "2000-12-01T14:01:01.000Z",
                "user": Object {
                  "login": "teste",
                },
              },
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          "type": [Function],
        },
      ],
      "type": [Function],
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
      },
    },
  },
}
`;

exports[`Components > QuestionTable Render Not Found 1`] = `
ShallowWrapper {
  "length": 1,
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <QuestionTable
    value={Array []}
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "class",
    "props": Object {
      "message": "Nenhuma questão encontrada",
      "type": "info",
    },
    "ref": null,
    "rendered": null,
    "type": [Function],
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "class",
      "props": Object {
        "message": "Nenhuma questão encontrada",
        "type": "info",
      },
      "ref": null,
      "rendered": null,
      "type": [Function],
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
      },
    },
  },
}
`;
